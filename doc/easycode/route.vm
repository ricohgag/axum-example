$!{init.vm}

##定义初始变量
#set($tableName = $tool.append($tableInfo.name, ""))
#set($tableObjName = $tableInfo.obj.name.replaceFirst("sys_",""))
#set($tableObjParamName = $tool.append($tableObjName, "_param"))

##设置回调
$!callback.setFileName($tool.append($tableObjName, ".rs"))
$!callback.setSavePath($tool.append($tableInfo.savePath, "/router"))
##拿到主键
#if(!$tableInfo.pkColumn.isEmpty())
    #set($pk = $tableInfo.pkColumn.get(0))
#end

use axum::extract::{Path, Query};
use axum::{Extension, Json};
use crate::models::${tableObjName}::{$!{tableInfo.name}, $!{tableInfo.name}Param, $!{tableInfo.name}QueryParam};
use crate::error::Result;
use crate::repositories::RepoExt;
use crate::service;
use crate::models::result::{R, ToResult};


pub async fn select_pages(Extension(repo): RepoExt, 
    Query(${tableObjName}_query_param): Query<$!{tableInfo.name}QueryParam>
) -> R<Vec<$!{tableInfo.name}>> {
    let users_res = service::${tableObjName}::select_pages(repo.clone(), &${tableObjName}_query_param).await;
    users_res.to_result()
}

pub async fn select_one(Extension(repo): RepoExt, Path(id): Path<i32>) -> R<$!{tableInfo.name}> {
    let user_res = service::${tableObjName}::select_one(repo.clone(), id).await;
    user_res.to_result()
}

pub async fn insert(Extension(repo): RepoExt, Json(${tableObjParamName}): Json($!{tableInfo.name}Param)) -> R<()> {
    let res = service::${tableObjName}::insert(repo.clone(), ${tableObjParamName}).await;
    res.to_result()
}

pub async fn update(Extension(repo): RepoExt, Json(${tableObjParamName}): Json($!{tableInfo.name}Param)) -> R<()> {
    let res = service::${tableObjName}::update(repo.clone(), ${tableObjParamName}).await;
    res.to_result()
}

pub async fn delete(Extension(repo): RepoExt, Path(id): Path<i32>) -> R<()> {
    let res = service::${tableObjName}::delete(repo.clone(), id).await;
    res.to_result()
}