{
  "author" : "makejava",
  "version" : "1.2.8",
  "userSecure" : "",
  "currTypeMapperGroupName" : "axum-web",
  "currTemplateGroupName" : "axum-web",
  "currColumnConfigGroupName" : "Default",
  "currGlobalConfigGroupName" : "Default",
  "typeMapper" : {
    "axum-web" : {
      "name" : "axum-web",
      "elementList" : [ {
        "matchType" : "REGEX",
        "columnType" : "varchar(\\(\\d+\\))?",
        "javaType" : "String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "char(\\(\\d+\\))?",
        "javaType" : "String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|medium|long)*text",
        "javaType" : "String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "decimal(\\(\\d+,\\d+\\))?",
        "javaType" : "f64"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "integer",
        "javaType" : "i32"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|small|medium)*int(\\(\\d+\\))?",
        "javaType" : "i32"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int4",
        "javaType" : "i32"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int8",
        "javaType" : "i64"
      }, {
        "matchType" : "REGEX",
        "columnType" : "bigint(\\(\\d+\\))?",
        "javaType" : "i64"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "date",
        "javaType" : "DateTime<Utc>"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "datetime",
        "javaType" : "DateTime<Utc>"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "timestamp",
        "javaType" : "DateTime<Utc>"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "time",
        "javaType" : "DateTime<Utc>"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "boolean",
        "javaType" : "bool"
      } ]
    }
  },
  "template" : {
    "axum-web" : {
      "name" : "axum-web",
      "elementList" : [ {
        "name" : "route.rs.vm",
        "code" : "$!{init.vm}\n\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"\"))\n#set($tableObjName = $tableInfo.obj.name.replaceFirst(\"sys_\",\"\"))\n#set($tableObjParamName = $tool.append($tableObjName, \"_param\"))\n\n##设置回调\n$!callback.setFileName($tool.append($tableObjName, \".rs\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/router\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\nuse axum::extract::{Path, Query};\nuse axum::{Extension, Json};\nuse crate::models::${tableObjName}::{$!{tableInfo.name}, $!{tableInfo.name}Param, $!{tableInfo.name}QueryParam};\nuse crate::repositories::RepoExt;\nuse crate::service;\nuse crate::models::result::{R, ToResult};\n\n\npub async fn select_page(Extension(repo): RepoExt, \n    Query(${tableObjName}_query_param): Query<$!{tableInfo.name}QueryParam>\n) -> R<Vec<$!{tableInfo.name}>> {\n    let users_res = service::${tableObjName}::select_page(repo.clone(), &${tableObjName}_query_param).await;\n    users_res.to_result()\n}\n\npub async fn select_one(Extension(repo): RepoExt, Path(id): Path<i32>) -> R<$!{tableInfo.name}> {\n    let user_res = service::${tableObjName}::select_one(repo.clone(), id).await;\n    user_res.to_result()\n}\n\npub async fn insert(Extension(repo): RepoExt, Json(${tableObjParamName}): Json<$!{tableInfo.name}Param>) -> R<()> {\n    let res = service::${tableObjName}::insert(repo.clone(), ${tableObjParamName}).await;\n    res.to_result()\n}\n\npub async fn update(Extension(repo): RepoExt, Json(${tableObjParamName}): Json<$!{tableInfo.name}Param>) -> R<()> {\n    let res = service::${tableObjName}::update(repo.clone(), ${tableObjParamName}).await;\n    res.to_result()\n}\n\npub async fn delete(Extension(repo): RepoExt, Path(id): Path<i32>) -> R<()> {\n    let res = service::${tableObjName}::delete(repo.clone(), id).await;\n    res.to_result()\n}"
      }, {
        "name" : "service.rs.vm",
        "code" : "$!{init.vm}\n\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"\"))\n#set($tableObjName = $tableInfo.obj.name.replaceFirst(\"sys_\",\"\"))\n#set($tableObjParamName = $tool.append($tableObjName, \"_param\"))\n\n##设置回调\n$!callback.setFileName($tool.append($tableObjName, \".rs\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\nuse crate::error::Result;\nuse crate::models::${tableObjName}::{$!{tableInfo.name}, $!{tableInfo.name}Param, $!{tableInfo.name}QueryParam};\nuse crate::repositories::{${tableObjName}::$!{tableInfo.name}Repo, Repositories};\nuse std::sync::Arc;\n\n\npub async fn select_page<R: Repositories>(repo: Arc<R>,\n    ${tableObjName}_query_param: &$!{tableInfo.name}QueryParam,\n) -> Result<Vec<$!{tableInfo.name}>> {\n    let ${tableObjName}s = repo.${tableObjName}().find_all(${tableObjName}_query_param).await?;\n    Ok(${tableObjName}s)\n}\n\npub async fn select_one<R: Repositories>(repo: Arc<R>, ${tableObjName}_id: i32) -> Result<$!{tableInfo.name}> {\n    let ${tableObjName} = repo.${tableObjName}().find_by_id(${tableObjName}_id).await?;\n    Ok(${tableObjName})\n}\n\npub async fn insert<R: Repositories>(repo: Arc<R>, ${tableObjParamName}: $!{tableInfo.name}Param) -> Result<()> {\n    repo.${tableObjName}().insert(&${tableObjParamName}).await?;\n    Ok(())\n}\n\npub async fn update<R: Repositories>(repo: Arc<R>, ${tableObjParamName}: $!{tableInfo.name}Param) -> Result<()> {\n    repo.${tableObjName}().update_by_id(&${tableObjParamName}).await?;\n    Ok(())\n}\n\npub async fn delete<R: Repositories>(repo: Arc<R>, ${tableObjName}_id: i32) -> Result<()> {\n    repo.${tableObjName}().delete_by_id(${tableObjName}_id).await?;\n    Ok(())\n}"
      }, {
        "name" : "model.rs.vm",
        "code" : "$!{init.vm}\n\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"\"))\n#set($tableObjName = $tableInfo.obj.name.replaceFirst(\"sys_\",\"\"))\n#set($tableObjParamName = $tool.append($tableObjName, \"_param\"))\n\n##设置回调\n$!callback.setFileName($tool.append($tableObjName, \".rs\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/models\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\nuse serde::{Deserialize, Serialize};\nuse sqlx::FromRow;\nuse chrono::{DateTime, Utc};\n\n#[derive(Serialize, Deserialize, FromRow, Debug)]\npub struct $!{tableInfo.name} {\n\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})\n    //${column.comment}#end\n    \n    pub $!{column.obj.name}: #if(${column.obj.isNotNull()})\n$!{tool.getClsNameByFullName($column.type)},\n#else\nOption<$!{tool.getClsNameByFullName($column.type)}>,\n#end\n#end\n\n}\n\n\n#[derive(Serialize, Deserialize, FromRow, Debug)]\npub struct $!{tableInfo.name}Param {\n\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})\n    //${column.comment}#end\n\n    pub $!{column.obj.name}: #if(${column.obj.isNotNull()})\n$!{tool.getClsNameByFullName($column.type)},\n#else\nOption<$!{tool.getClsNameByFullName($column.type)}>,\n#end\n#end\n\n}\n\n#[derive(Serialize, Deserialize, FromRow, Debug)]\npub struct $!{tableInfo.name}QueryParam {\n\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})\n    //${column.comment}#end\n\n    pub $!{column.obj.name}: Option<$!{tool.getClsNameByFullName($column.type)}>,\n#end\n\n}"
      }, {
        "name" : "repositories.rs.vm",
        "code" : "$!{init.vm}\n\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"\"))\n#set($tableObjName = $tableInfo.obj.name.replaceFirst(\"sys_\",\"\"))\n#set($tableObjParamName = $tool.append($tableObjName, \"_param\"))\n\n##设置回调\n$!callback.setFileName($tool.append($tableObjName, \".rs\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/repositories\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\nuse crate::error::Result;\nuse crate::models::${tableObjName}::{$!{tableInfo.name}, $!{tableInfo.name}Param, $!{tableInfo.name}QueryParam};\nuse crate::db::mysql::Db;\nuse axum::async_trait;\nuse anyhow::Context;\n\n\npub struct $!{tableInfo.name}RepoImpl {\n    pool: Db,\n}\n\nimpl $!{tableInfo.name}RepoImpl {\n    pub fn new(pool: Db) -> Self {\n        Self { pool: pool }\n    }\n}\n\n// #[automock]\n#[async_trait]\npub trait $!{tableInfo.name}Repo {\n    async fn find_all(&self, ${tableObjName}_query_param: &$!{tableInfo.name}QueryParam) -> Result<Vec<$!{tableInfo.name}>>;\n\n    async fn find_by_id(&self, user_id: i32) -> Result<$!{tableInfo.name}>;\n\n    async fn insert(&self, ${tableObjParamName}: &$!{tableInfo.name}Param) -> Result<()>;\n\n    async fn update_by_id(&self, ${tableObjParamName}: &$!{tableInfo.name}Param) -> Result<()>;\n\n    async fn delete_by_id(&self, id: i32) -> Result<()>;\n\n}\n\n\n#[async_trait]\nimpl $!{tableInfo.name}Repo for $!{tableInfo.name}RepoImpl {\n    async fn find_all(&self, ${tableObjName}_query_param: &$!{tableInfo.name}QueryParam) -> Result<Vec<$!{tableInfo.name}>> {\n        let mut query = sqlx::query_as::<_, $!{tableInfo.name}>(\"select * from ${tableObjName}\");\n        let result = query\n            .fetch_all(&*self.pool)\n            .await\n            .context(\"DB ERROR (find all users)\")?;\n        Ok(result)\n    }\n\n    async fn find_by_id(&self, ${tableObjName}_id: i32) -> Result<$!{tableInfo.name}> {\n        let row = sqlx::query_as::<_, $!{tableInfo.name}>(\"select * from $!{tableInfo.obj.name} where id = $1\")\n            .bind(${tableObjName}_id)\n            .fetch_one(&*self.pool)\n            .await\n            .context(\"DB ERROR (find ${tableObjName} by id)\")?;\n        Ok(row)\n    }\n\n    async fn insert(&self, ${tableObjParamName}: &$!{tableInfo.name}Param) -> Result<()> {\n        todo!()\n    }\n\n    async fn update_by_id(&self, ${tableObjParamName}: &$!{tableInfo.name}Param) -> Result<()> {\n        todo!()\n    }\n\n    async fn delete_by_id(&self, id: i32) -> Result<()> {\n        todo!()\n    }\n}"
      } ]
    }
  },
  "columnConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "title" : "disable",
        "type" : "BOOLEAN",
        "selectValue" : ""
      }, {
        "title" : "support",
        "type" : "SELECT",
        "selectValue" : "add,edit,query,del,ui"
      } ]
    }
  },
  "globalConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "name" : "autoImport.vm",
        "value" : "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
      }, {
        "name" : "define.vm",
        "value" : "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"
      }, {
        "name" : "init.vm",
        "value" : "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"sys_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"
      }, {
        "name" : "mybatisSupport.vm",
        "value" : "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"
      } ]
    }
  }
}